"""
Interfaz de Formularios M√©dicos con Streamlit
Sistema completo de captura y visualizaci√≥n de datos m√©dicos
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional
import json
import sys
import os
import streamlit as st
import json
import os

def get_google_credentials():
    
    
    # Si estamos en Streamlit Cloud, usamos st.secrets
    if "google" in st.secrets:
        return {
            "type": st.secrets["google"]["type"],
            "project_id": st.secrets["google"]["project_id"],
            "private_key_id": st.secrets["google"]["private_key_id"],
            "private_key": st.secrets["google"]["private_key"],
            "client_email": st.secrets["google"]["client_email"],
            "client_id": st.secrets["google"]["client_id"],
            "auth_uri": st.secrets["google"]["auth_uri"],
            "token_uri": st.secrets["google"]["token_uri"],
            "auth_provider_x509_cert_url": st.secrets["google"]["auth_provider_x509_cert_url"],
            "client_x509_cert_url": st.secrets["google"]["client_x509_cert_url"],
            "universe_domain": st.secrets["google"].get("universe_domain", "googleapis.com"),
        }
    # Si estamos local, leemos el archivo
    else:
        cred_path = os.path.join("credentials", "service_account.json")
        with open(cred_path) as f:
            return json.load(f)
# Configurar el path para importaciones
current_dir = os.path.dirname(__file__)
parent_dir = os.path.dirname(os.path.dirname(current_dir))
sys.path.append(parent_dir)

# Importaciones opcionales - continuar si no est√°n disponibles
try:
    from sheets.formularios_google_sheets import FormulariosGoogleSheets
except ImportError:
    FormulariosGoogleSheets = None

try:
    from auth_manager import AuthManager
except ImportError:
    AuthManager = None

import gspread
from google.oauth2.service_account import Credentials
from google.oauth2.service_account import Credentials

creds_info = get_google_credentials()
creds = Credentials.from_service_account_info(creds_info)

with st.sidebar:
        st.header("üîß Configuraci√≥n")

        # --- MEN√ö DE NAVEGACI√ìN PRINCIPAL ---
        st.markdown("### üóÇ Navegaci√≥n")
        paginas = {
            "üè† Dashboard Principal": "dashboard",
            "üè• √Årea M√©dica": "areamedica",
            "ü•ó √Årea Nutrici√≥n": "nutricion",
            "üèãÔ∏è √Årea F√≠sica": "fisica"
        }
        for nombre, clave in paginas.items():
            if st.button(nombre):
                st.session_state['pagina'] = clave
                st.experimental_rerun()

        st.markdown("---")
        # Configuraci√≥n de Google Sheets
        st.subheader("üìä Google Sheets")


def read_google_sheet_with_headers(sheet_id=None, worksheet_name=None, credentials_path=None):
    """
    Lee un Google Sheet usando la primera fila como nombres de columnas
    
    Args:
        sheet_id (str): ID del Google Sheet (opcional, usa el por defecto)
        worksheet_name (str): Nombre de la hoja espec√≠fica (opcional, usa la primera)
        credentials_path (str): Ruta al archivo de credenciales (opcional)
    
    Returns:
        dict: Diccionario con 'success', 'data', 'columns' y 'message'
    """
    
    # Configuraci√≥n por defecto
    if sheet_id is None:
        sheet_id = '1zGyW-M_VV7iyDKVB1TTd0EEP3QBjdoiBmSJN2tK-H7w'
    
    # --- NUEVO: Obtener credenciales de la forma correcta ---
    try:
        SCOPES = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        # Si estamos en Streamlit Cloud (st.secrets), usamos from_service_account_info
        if "google" in st.secrets:
            creds_info = get_google_credentials()
            credentials = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
        else:
            # Si estamos local, buscamos el archivo
            if credentials_path is None:
                alternative_paths = [
                    "../credentials/service_account.json",
                    "credentials/service_account.json",
                    "C:/Users/dell/Desktop/Car/credentials/service_account.json"
                ]
                for path in alternative_paths:
                    if os.path.exists(path):
                        credentials_path = path
                        break
            if not credentials_path:
                return {
                    'success': False,
                    'data': None,
                    'columns': None,
                    'message': 'Archivo de credenciales no encontrado'
                }
            credentials = Credentials.from_service_account_file(credentials_path, scopes=SCOPES)
        
        gc = gspread.authorize(credentials)
        
        # Abrir el Google Sheet
        sh = gc.open_by_key(sheet_id)
        
        # Seleccionar la hoja de trabajo
        if worksheet_name:
            worksheet = sh.worksheet(worksheet_name)
        else:
            worksheets = sh.worksheets()
            worksheet = None
            for ws in worksheets:
                if ws.id == 982269766:
                    worksheet = ws
                    break
            if worksheet is None:
                worksheet = sh.get_worksheet(0)
        
        # Leer todos los datos
        all_data = worksheet.get_all_values()
        
        if not all_data:
            return {
                'success': False,
                'data': None,
                'columns': None,
                'message': 'La hoja est√° vac√≠a'
            }
        
        # Primera fila como columnas
        columns = all_data[0]
        data_rows = all_data[1:]  # Resto de filas como datos
        
        # Crear lista de diccionarios (cada fila es un diccionario)
        structured_data = []
        for row in data_rows:
            row_data = {}
            for i, column in enumerate(columns):
                value = row[i] if i < len(row) else ''
                row_data[column] = value
            structured_data.append(row_data)
        
        return {
            'success': True,
            'data': structured_data,
            'columns': columns,
            'raw_data': data_rows,
            'total_rows': len(data_rows),
            'sheet_title': sh.title,
            'worksheet_title': worksheet.title,
            'message': f'Datos le√≠dos exitosamente: {len(data_rows)} filas, {len(columns)} columnas'
        }
        
    except gspread.exceptions.SpreadsheetNotFound:
        return {
            'success': False,
            'data': None,
            'columns': None,
            'message': 'Google Sheet no encontrado. Verifica el ID y permisos.'
        }
        
    except gspread.exceptions.APIError as e:
        return {
            'success': False,
            'data': None,
            'columns': None,
            'message': f'Error de API: {e}. Verifica que hayas compartido el sheet con la cuenta de servicio.'
        }
        
    except Exception as e:
        return {
            'success': False,
            'data': None,
            'columns': None,
            'message': f'Error inesperado: {e}'
        }


def create_dataframe_from_sheet(sheet_id=None, worksheet_name=None):
    """
    Crea un DataFrame de pandas desde el Google Sheet
    
    Returns:
        pandas.DataFrame o None si hay error
    """
    result = read_google_sheet_with_headers(sheet_id, worksheet_name)
    
    if result['success']:
        df = pd.DataFrame(result['data'])
        return df
    else:
        return None

# ==========================================
# INTERFAZ STREAMLIT
# ==========================================

def main_streamlit():
    """
    Interfaz principal de Streamlit para visualizar datos de Google Sheets
    """
    st.set_page_config(
        page_title="CAR - Sistema Digital",
        page_icon="‚ö°",
        layout="wide",
        initial_sidebar_state="expanded"  # <-- Sidebar visible por defecto
    )

    # CSS personalizado para el dise√±o profesional
    st.markdown("""
    <style>
    /* Ocultar elementos de Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    
    /* Estilo del contenedor principal */
    .main > div {
        padding-top: 0rem;
    }
    
    /* Header principal con gradiente azul */
    .header-container {
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 50%, #60a5fa 100%);
        padding: 3rem 2rem;
        margin: -1rem -1rem 2rem -1rem;
        border-radius: 0 0 20px 20px;
        text-align: center;
        box-shadow: 0 8px 32px rgba(30, 58, 138, 0.3);
    }
    
    .header-title {
        color: white;
        font-size: 3rem;
        font-weight: 800;
        margin: 0;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    
    .header-subtitle {
        color: #e0f2fe;
        font-size: 1.2rem;
        font-weight: 400;
        margin: 0.5rem 0 0 0;
        opacity: 0.95;
    }
    
    /* Estilo de las tarjetas m√©tricas */
    .metric-container {
        background: linear-gradient(135deg, #1e40af 0%, #2563eb 100%);
        padding: 2rem 1.5rem;
        border-radius: 16px;
        text-align: center;
        box-shadow: 0 8px 25px rgba(37, 99, 235, 0.25);
        border: 1px solid rgba(255, 255, 255, 0.1);
        margin: 0.5rem;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .metric-container:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 35px rgba(37, 99, 235, 0.4);
    }
    
    .metric-number {
        color: white;
        font-size: 3.5rem;
        font-weight: 800;
        margin: 0;
        line-height: 1;
    }
    
    .metric-label {
        color: #bfdbfe;
        font-size: 1.1rem;
        font-weight: 500;
        margin: 0.5rem 0 0 0;
    }
    
    /* Contenedor de m√©tricas */
    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
        margin: 2rem 0;
    }
    
    /* Estilo para gr√°ficos */
    .chart-container {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        margin: 1rem 0;
    }
    </style>
    """, unsafe_allow_html=True)

    # Header principal con dise√±o profesional
    st.markdown("""
    <div class="header-container">
        <h1 class="header-title">‚ö° Sistema digital CAR</h1>
        <p class="header-subtitle">Sistema Integral de Gesti√≥n Deportiva Profesional</p>
    </div>
    """, unsafe_allow_html=True)

    # Sidebar con configuraci√≥n
    with st.sidebar:
        st.header("üîß Configuraci√≥n")
        
        # Configuraci√≥n de Google Sheets
        st.subheader("üìä Google Sheets")
        
        sheet_id = st.text_input(
            "ID del Google Sheet:",
            value="1zGyW-M_VV7iyDKVB1TTd0EEP3QBjdoiBmSJN2tK-H7w",
            help="ID del Google Sheet que contiene los datos m√©dicos"
        )
        
        worksheet_name = st.text_input(
            "Nombre de la hoja (opcional):",
            value="",
            help="Deja vac√≠o para usar la hoja principal"
        )
        
        st.markdown("---")
        
        # Estado del sistema
        st.subheader("üìã Estado del Sistema")
        
        # Verificar credenciales
        credenciales_encontradas = False
        rutas_credenciales = [
            "../credentials/service_account.json",
            "credentials/service_account.json",
            "C:/Users/dell/Desktop/Car/credentials/service_account.json"
        ]
        
        for ruta in rutas_credenciales:
            if os.path.exists(ruta):
                st.success(f"‚úÖ Credenciales: {ruta}")
                credenciales_encontradas = True
                break
        
        if not credenciales_encontradas:
            st.error("‚ùå Credenciales no encontradas")
            st.info("üí° Aseg√∫rate de tener el archivo service_account.json en la carpeta credentials")

    # CARGAR DATOS AUTOM√ÅTICAMENTE (sin bot√≥n)
    with st.spinner("üîÑ Cargando datos desde Google Sheets..."):
        try:
            # Llamar a la funci√≥n existente
            result = read_google_sheet_with_headers(sheet_id, worksheet_name or None)
            
            if result['success']:
                
                
                # Crear DataFrame
                df = pd.DataFrame(result['data'])
                
                # MOSTRAR DIRECTAMENTE EL RESUMEN (sin pesta√±as)
                mostrar_resumen_datos(df)
                
                # MOSTRAR GR√ÅFICOS INTERACTIVOS
                mostrar_graficos_interactivos(df)
            else:
                st.error(f"‚ùå Error al cargar datos: {result['message']}")
                
                # Mostrar informaci√≥n de ayuda
                with st.expander("üí° Soluci√≥n de Problemas", expanded=True):
                    st.markdown("""
                    **Posibles soluciones:**
                    1. Verifica que el archivo `service_account.json` est√© en la carpeta `credentials`
                    2. Aseg√∫rate de que el Google Sheet sea accesible
                    3. Verifica que la cuenta de servicio tenga permisos de lectura
                    4. Confirma que el ID del Sheet sea correcto
                    """)
                
        except Exception as e:
            st.error(f"‚ùå Error inesperado: {str(e)}")

def mostrar_resumen_datos(df):
    """
    Muestra resumen estad√≠stico de los datos con tarjetas m√©tricas estilo profesional
    """
    
    # Calcular m√©tricas
    total_lesionados = len(df)
    
    if 'Severidad de la lesi√≥n' in df.columns:
        en_recuperacion = len(df[df['Severidad de la lesi√≥n'].str.contains('Leve|Moderada', case=False, na=False)])
        recuperados = len(df[df['Severidad de la lesi√≥n'].str.contains('Leve \(1-7 d√≠as\)', case=False, na=False)])
        casos_graves = len(df[df['Severidad de la lesi√≥n'].str.contains('Grave|Muy grave', case=False, na=False)])
    else:
        en_recuperacion = 0
        recuperados = 0
        casos_graves = 0
    
    # Tarjetas m√©tricas con dise√±o profesional
    st.markdown("""
    <div class="metrics-grid">
        <div class="metric-container">
            <div class="metric-number">{}</div>
            <div class="metric-label">Lesiones totales</div>
        </div>
        <div class="metric-container">
            <div class="metric-number">{}</div>
            <div class="metric-label">En Recuperaci√≥n</div>
        </div>
        <div class="metric-container">
            <div class="metric-number">{}</div>
            <div class="metric-label">Recuperados</div>
        </div>
        <div class="metric-container">
            <div class="metric-number">{}</div>
            <div class="metric-label">Casos Graves</div>
        </div>
    </div>
    """.format(total_lesionados, en_recuperacion, recuperados, casos_graves), unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Gr√°ficos con dise√±o profesional
    if 'Severidad de la lesi√≥n' in df.columns:
        severidad_counts = df['Severidad de la lesi√≥n '].value_counts()
        
        # Contenedor para gr√°ficos
        st.markdown('<div class="chart-container">', unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìä Distribuci√≥n por Severidad")
            # Gr√°fico de barras con colores azules
            fig = px.bar(
                x=severidad_counts.index,
                y=severidad_counts.values,
                color_discrete_sequence=['#1e40af', '#2563eb', '#3b82f6', '#60a5fa']
            )
            
            fig.update_layout(
                showlegend=False,
                xaxis_title="Severidad de la Lesi√≥n",
                yaxis_title="Cantidad de Jugadores",
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(color='#374151')
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.markdown("### üìà An√°lisis Porcentual")
            # Gr√°fico de dona con colores azules
            fig_pie = px.pie(
                values=severidad_counts.values,
                names=severidad_counts.index,
                hole=0.4,
                color_discrete_sequence=['#1e40af', '#2563eb', '#3b82f6', '#60a5fa']
            )
            
            fig_pie.update_layout(
                showlegend=True,
                legend=dict(orientation="v", yanchor="middle", y=0.5),
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(color='#374151')
            )
            
            st.plotly_chart(fig_pie, use_container_width=True)
        
        st.markdown('</div>', unsafe_allow_html=True)


def mostrar_graficos_interactivos(df):
    """
    Muestra gr√°ficos interactivos con filtros - VERSI√ìN CORREGIDA
    """
    st.markdown("---")
    st.markdown("### üìä Informe de Lesiones por Divisi√≥n")
    
    # NOMBRES CORRECTOS DE LAS COLUMNAS
    col_categoria = 'Categor√≠a'  # ‚Üê CON TILDE
    col_severidad = 'Severidad de la lesi√≥n  '  # ‚Üê CON ESPACIOS EXTRA
    
    # Limpiar datos si es necesario
    if col_severidad in df.columns:
        df[col_severidad] = df[col_severidad].str.strip()  # Quitar espacios extra
    
    # Filtros interactivos
    col_filtro1, col_filtro2 = st.columns(2)
    
    with col_filtro1:
        # Filtro por Divisi√≥n/Categor√≠as
        if col_categoria in df.columns:
            categorias_disponibles = ['Todas'] + sorted(df[col_categoria].dropna().unique().tolist())
            categoria_seleccionada = st.selectbox(
                "üîç Seleccionar Divisi√≥n",
                categorias_disponibles,
                key="filtro_categoria"
            )
        else:
            categoria_seleccionada = 'Todas'
            st.info(f"‚ö†Ô∏è Columna '{col_categoria}' no encontrada")
    
    with col_filtro2:
        # Filtro por Estado/Severidad
        if col_severidad in df.columns:
            estados_disponibles = ['Todos'] + sorted(df[col_severidad].dropna().unique().tolist())
            estado_seleccionado = st.selectbox(
                "üìã Estado",
                estados_disponibles,
                key="filtro_estado"
            )
        else:
            estado_seleccionado = 'Todos'
            st.info(f"‚ö†Ô∏è Columna '{col_severidad}' no encontrada")
        
    # Filtrar DataFrame seg√∫n selecciones
    df_filtrado = df.copy()
    
    if categoria_seleccionada != 'Todas' and col_categoria in df.columns:
        df_filtrado = df_filtrado[df_filtrado[col_categoria] == categoria_seleccionada]
    
    if estado_seleccionado != 'Todos' and col_severidad in df.columns:
        df_filtrado = df_filtrado[df_filtrado[col_severidad] == estado_seleccionado]
    
    # Gr√°ficos lado a lado
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìä Lesiones por Divisi√≥n")
        
        if col_categoria in df_filtrado.columns and not df_filtrado.empty:
            # Contar lesiones por categor√≠a
            categorias_counts = df_filtrado['Categor√≠a'].value_counts()
            
            # Gr√°fico de barras con colores azules oscuros (como en la imagen)
            fig_categorias = px.bar(
                x=categorias_counts.index,
                y=categorias_counts.values,
                color_discrete_sequence=['#1e3a8a', '#1e40af', '#2563eb', '#3b82f6']
            )
            
            fig_categorias.update_layout(
                showlegend=False,
                xaxis_title="Divisi√≥n",
                yaxis_title="Cantidad de Lesiones",
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(color='#374151', size=12),
                height=400,
                margin=dict(t=20, b=20, l=20, r=20)
            )
            
            fig_categorias.update_traces(
                texttemplate='%{y}',
                textposition='outside'
            )
            
            st.plotly_chart(fig_categorias, use_container_width=True)
            
            # Mostrar estad√≠sticas
            st.info(f"üìà Total de divisiones: {len(categorias_counts)} | Registros mostrados: {len(df_filtrado)}")
            
        else:
            st.warning("‚ö†Ô∏è No hay datos de categor√≠as para mostrar")
    
    with col2:
        st.markdown("#### üéØ Distribuci√≥n por Severidad")
        
        if col_severidad in df_filtrado.columns and not df_filtrado.empty:
            # Contar por severidad
            severidad_counts = df_filtrado[col_severidad].value_counts()
            
            # Gr√°fico de torta con colores como en la imagen (verde, amarillo, rojo)
            colores_severidad = {
                'Leve (1-7 d√≠as)': '#22c55e',      # Verde
                'Moderada (1-4 semanas)': '#eab308', # Amarillo
                'Grave (1-3 meses)': "#df6767",     # Rojo
                'Muy grave (+3 meses)': '#dc2626'   # Rojo oscuro
            }
            
            # Crear lista de colores basada en los datos
            colores = [colores_severidad.get(sev, '#64748b') for sev in severidad_counts.index]
            
            fig_severidad = px.pie(
                values=severidad_counts.values,
                names=severidad_counts.index,
                color_discrete_sequence=colores
            )
            
            fig_severidad.update_layout(
                showlegend=True,
                legend=dict(
                    orientation="v",
                    yanchor="middle",
                    y=0.5,
                    xanchor="left",
                    x=1.05
                ),
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(color='#374151', size=12),
                height=400,
                margin=dict(t=20, b=20, l=20, r=80)
            )
            
            fig_severidad.update_traces(
                textposition='inside',
                textinfo='percent+label',
                textfont_size=12
            )
            
            st.plotly_chart(fig_severidad, use_container_width=True)
            
            # Mostrar estad√≠sticas
            st.info(f"üìä Tipos de severidad: {len(severidad_counts)} | Total lesiones: {severidad_counts.sum()}")
            
        else:
            st.warning("‚ö†Ô∏è No hay datos de severidad para mostrar")
    
    # Tabla resumen de datos filtrados
    if not df_filtrado.empty:
        st.markdown("---")
        st.markdown("#### üìã Vista Detallada de Datos Filtrados")
        
        # Informaci√≥n de filtros aplicados
        filtros_aplicados = []
        if categoria_seleccionada != 'Todas':
            filtros_aplicados.append(f"Divisi√≥n: {categoria_seleccionada}")
        if estado_seleccionado != 'Todos':
            filtros_aplicados.append(f"Estado: {estado_seleccionado}")
        
        if filtros_aplicados:
            st.info(f"üîç Filtros aplicados: {' | '.join(filtros_aplicados)}")
        
        # Mostrar tabla con scroll
        st.dataframe(
            df_filtrado,
            use_container_width=True,
            height=300
        )
        
        # Bot√≥n de descarga
        csv_data = df_filtrado.to_csv(index=False)
        st.download_button(
            label="üì• Descargar Datos Filtrados",
            data=csv_data,
            file_name=f"lesiones_filtradas_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
    else:
        st.warning("‚ö†Ô∏è No hay datos que coincidan con los filtros seleccionados")




    
   
# ==========================================
# EJECUTAR APLICACI√ìN
# ==========================================

if __name__ == "__main__":
    # Si se ejecuta directamente, iniciar Streamlit
    main_streamlit()
